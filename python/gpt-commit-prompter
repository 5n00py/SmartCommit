#!/usr/bin/env python3

"""
================================================================================
                              gpt-commit-prompter 
================================================================================

Author(s) : David Schmid (david.schmid@mailbox.org)
Version   : 0.2.1

------------------------------ Description -----------------------------------
Utilizes OpenAI's GPT-3 model to auto-generate git commit messages from
provided changes. Accepts changes as string input or from a .diff file, then
employs GPT-3 to offer a summarized description and detailed bullet points.

------------------------------ Dependencies -----------------------------------
- OpenAI Python SDK
- Python 3.6 or higher

--------------------------------- Usage --------------------------------------
Execute the script with changes in string format or by indicating a .diff file:

    python3 gpt-commit-prompter "Your changes here"
    OR
    python3 gpt-commit-prompter /path/to/changes.diff

================================================================================
"""

import argparse
import json
import os
import openai


def load_config(file_path="../config.json"):
    # Determine the directory where this script is located.
    dir_path = os.path.dirname(os.path.realpath(__file__))
    # Construct the full path to the config.json file.
    full_path = os.path.join(dir_path, file_path)

    with open(full_path, "r") as f:
        return json.load(f)


def set_openai_key():
    if "OPENAI_API_KEY" not in os.environ:
        raise Exception("OPENAI_API_KEY not found in environment variables")
    openai.api_key = os.environ["OPENAI_API_KEY"]


def get_args():
    parser = argparse.ArgumentParser(
        description="Generate a git commit message using GPT-3"
    )

    parser.add_argument(
        "changes",
        metavar="changes",
        type=str,
        help="Changes as a string or path to a .diff file",
    )

    parser.add_argument(
        "-i",
        "--instruction",
        default="",
        help="Additional instruction to guide the AI's response",
    )

    parser.add_argument(
        "-s",
        "--style",
        default="imperative",
        choices=["imperative", "simple", "detailed", "conventional"],
        help="Commit message style",
    )

    return parser.parse_args()


def get_changes(args):
    if args.changes.endswith(".diff"):
        if os.path.isfile(args.changes):
            with open(args.changes, "r") as file:
                return file.read()
        else:
            raise Exception(f"{args.changes} does not exist.")
    else:
        return args.changes


def generate_commit_message(changes, instruction, style="imperative"):
    config = load_config()

    # Ensure the provided style is in the configuration
    if style not in config["style"]:
        raise ValueError(f"Style '{style}' not found in configuration.")

    system_prompt = config["style"][style]["system_prompt"]

    changes = "Write a git commit message for the following changes: \n\n" + changes

    # Add the instruction to the AI messages
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": changes},
    ]

    if instruction:
        messages.append({"role": "user", "content": instruction})

    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=messages,  # type: ignore
    )

    commit_message = response.choices[0].message["content"]  # type: ignore
    return commit_message


def main():
    set_openai_key()

    args = get_args()

    changes = get_changes(args)

    commit_message = generate_commit_message(changes, args.instruction, args.style)

    print(commit_message)


if __name__ == "__main__":
    main()
