#!/bin/bash

# gc-smart
#
# Description:
# ------------
#
# This script automatically generates a commit message for staged changes in a
# Git repository. It works by generating a diff of the staged changes called
# staged_changes.diff, then feeding this diff into the ai_commit_helper.py
# script. The output is then saved to a file named tmp_commit_msg.txt. This
# file is then used as template for running the "git commit" command, allowing
# the user to review and edit the auto-generated commit message before
# finalizing the commit.
#
# Prerequisites:
# --------------
# - There should be staged changes in the current repository. 
# - ai_commit_helper.py should be located in the current directory or be available
#   trough the path variable. 
# - tmp_commit_msg.txt is used to store the generated commit message, and will 
#   be overwritten each time the function is run.
#   Ensure any important data in this file is backed up. 
# - tmp_commit_msg.txt has to be configured as commit template: 
#   git config --global commit.template tmp_commit_msg.txt

# Options:
# --------
# Run "gc-smart --help" to see the options, or just see below ;-)
#
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# Functions
# ------------------------------------------------------------------------------

# Help Message
# ------------

print_help() {
	# Print a detailed help message for the gc-smart script
    echo "Usage: gc-smart [OPTION]"
    echo ""
    echo "Automatically generate a commit message for staged changes in a Git repository."
    echo ""
    echo "Options:"
    echo "-h, --help          Display this help message."
    echo "--keep-files        Retain staged_changes.diff and tmp_commit_msg.txt after the commit process."
    echo "-q, --quick         Skip the preview of the AI generated commit message and commit directly."
}

# Error Handling
# --------------

check_git_repo() {
	# Check if inside a git repo and abort script otherwise
    if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        echo "Error: Not inside a Git repository."
        exit 2
    fi
}

check_staged_changes() {
	# Check if staged changes exist within the repo and abort otherwise
    if git diff --cached --quiet; then
        echo "No staged changes to commit"
        exit 1
    fi
}

check_ai_helper() {
	# Check if ai script exists and is executable and abort otherwise
    if ! [[ -x "ai_commit_helper.py" ]] && ! command -v ai_commit_helper.py &> /dev/null; then
        echo "Error: ai_commit_helper.py not found or not executable."
        exit 2
    fi
}

check_commit_template() {
	# Check if the commit template is set to tmp_commit_msg.txt. If not, inform
	# the user and give them an option to set it. If the user decides not to
	# set it, the script will abort. This is essential because the script
	# relies on the template to be set to tmp_commit_msg.txt for its
	# AI-generated commit messages.
    local current_template
    current_template=$(git config --get commit.template)

    # Check if the current commit template is set to tmp_commit_msg.txt
    if [[ "$current_template" != *'tmp_commit_msg.txt' ]]; then
        echo "The 'gc-smart' script requires 'tmp_commit_msg.txt' as the commit template to function correctly."
        
        # Ask if user wants to set tmp_commit_msg.txt as the commit template
        read -p "Would you like to set tmp_commit_msg.txt as your commit template? (y/n) " choice
        case "$choice" in
            y|Y )
                git config --global commit.template tmp_commit_msg.txt
                echo "tmp_commit_msg.txt is now set as your commit template."
                echo "Please re-run the gc-smart script to make the change effective!"
                exit 1
                ;;
            n|N|* )
                echo "Commit template not set to required tmp_commit_msg.txt. Script will abort."
                exit 1
                ;;
        esac
    fi
}

handle_git_commit_error() {
	# Handle specific Git errors encountered during the commit process,
	# particularly when a user does not modify the default commit message. If
	# the error log contains a message indicating that the user did not edit
	# the default commit message, this function will prompt the user with a
	# warning and provide them with an option to proceed without editing the
	# message or to abort the commit. Check if the error log contains a
	# specific message
    if grep -q "you did not edit the message" git_error.log; then
        # Warn the user
		echo "Warning: You either did not make any changes to the commit" \
		"message or you exited without saving. It's a good practice to customize" \
		"commit messages for clarity."
        read -p "Do you want to proceed without further editing and commit nevertheless? (y/n) " choice
        case "$choice" in
            y|Y )
				# Bypass commit.template and directly provide a
				# message from the file
                git commit -m "$(cat tmp_commit_msg.txt)"
                ;;
            n|N )
                echo "Commit aborted."
                ;;
            * )
                echo "Invalid choice. Commit aborted."
                ;;
        esac
    else
        cat git_error.log # Display other errors if there are any
    fi
}


# Options and Settings
# --------------------

check_for_help() {
	# Check for --help argument and print help message in case
    for arg in "$@"; do
        if [ "$arg" == "--help" ] || [ "$arg" == "-h" ]; then
            print_help
            exit 0
        fi
    done
}

set_keep_files_flag() {
	# Check for --keep-files argument and set flag accordingly
    KEEP_FILES=false
    for arg in "$@"; do
        if [ "$arg" == "--keep-files" ]; then
            KEEP_FILES=true
            break
        fi
    done
}

set_preview_flag() {
	# Check for --quick argument and set preview flag accordingly
    PREVIEW=true
    for arg in "$@"; do
        if [ "$arg" == "--quick" ] || [ "$arg" == "-q" ]; then
            PREVIEW=false
            break
        fi
    done
}

set_directory() {
    # Determine the directory of the currently executing script.
    # The result is stored in the DIR variable, which will be used to reference
    # other scripts or files relative to the directory of this script.
    DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
}

# Commit Message Generation and Handling
# --------------------------------------

generate_commit_message() {
    # Use the ai_commit_helper.py script to process the diff file 
	# (staged_changes.diff) and generate an AI-enhanced commit message.
    # Write the message to tmp_commit_msg.txt.
    # NOTE: The ai_commit_helper.py script must be located in the same directory
    # as this executing script for this function to work correctly.
    python3 "$DIR/ai_commit_helper.py" staged_changes.diff > tmp_commit_msg.txt
}

handle_preview() {
	# Interactively preview the auto-generated commit message.
	# The user is presented with options to:
	# 1. Proceed with the current commit message.
	# 2. Regenerate the commit message and preview it again.
	# 3. Abort the commit process.
	# The loop continues until the user decides to proceed with the commit or
	# aborts.
	regenerate=true

	while $regenerate; do
		# Preview the auto-generated commit message
		echo -e "\nGenerated Commit Message:"
		echo -e "-------------------------\n"
		cat tmp_commit_msg.txt
		echo -e "\n----------------------------------------------------------------\n\n"

		# Ask the user if he wants to proceed or regenerate
		read -p "Options: 
		1. Continue with commit
		2. Regenerate commit message 
		3. Abort 

		Choose [1/2/3]: " choice

		case "$choice" in
			1)
				# Continue to commit logic below
				regenerate=false
				;;
			2)
				# Regenerate commit message and preview again
				python3 "$DIR/ai_commit_helper.py" staged_changes.diff > tmp_commit_msg.txt

				;;
			3)
				# Abort
				echo "Commit aborted."
				rm -f staged_changes.diff tmp_commit_msg.txt
				exit 1
				;;
			*)
				echo "Invalid choice. Commit aborted."
				rm -f staged_changes.diff tmp_commit_msg.txt
				exit 1
				;;
		esac
	done
}


#-------------------------------------------------------------------------------
# Main Script Flow
#-------------------------------------------------------------------------------

# Argument parsing and settings
check_for_help "$@"
set_keep_files_flag "$@"
set_preview_flag "$@"
set_directory

check_git_repo
check_staged_changes
check_ai_helper
check_commit_template


# Generate a diff of the staged changes
git diff --cached > staged_changes.diff

generate_commit_message

if $PREVIEW; then
	handle_preview
fi

# Run git commit to start the commit process
git commit 2> git_error.log # redirect error messages to a log

# Check the result of the git commit operation
if [ $? -ne 0 ]; then # if git commit failed
	handle_git_commit_error
fi

# Delete files if --keep-files argument is not passed
if ! $KEEP_FILES; then
	rm -f git_error.log
    rm -f staged_changes.diff tmp_commit_msg.txt
fi
