#!/bin/bash

# gc-smart
#
# Description:
# ------------
#
# This script automatically generates a commit message for staged changes in a
# Git repository. It works by generating a diff of the staged changes called
# staged_changes.diff, then feeding this diff into the ai_commit_helper.py
# script. The output is then saved to a file named tmp_commit_msg.txt. This
# file is then used as template for running the "git commit" command, allowing
# the user to review and edit the auto-generated commit message before
# finalizing the commit.
#
# Optionally, by passing the --keep-files argument, the staged_changes.diff and
# tmp_commit_msg.txt files can be retained after the commit process.
#
# Prerequisites:
# --------------
# - There should be staged changes in the current repository. 
# - ai_commit_helper.py should be located in the current directory or be available
#   trough the path variable. 
# - tmp_commit_msg.txt is used to store the generated commit message, and will 
#   be overwritten each time the function is run.
#   Ensure any important data in this file is backed up. 
# - tmp_commit_msg.txt has to be configured as commit template: 
#   git config --global commit.template tmp_commit_msg.txt

# Check if in a Git repository
if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo "Error: Not inside a Git repository."
    exit 2
fi

# Check if there are staged changes
if git diff --cached --quiet; then
    echo "No staged changes to commit"
    exit 1
fi

# Check if the --keep-files argument is passed
KEEP_FILES=false
for arg in "$@"; do
    if [ "$arg" == "--keep-files" ]; then
        KEEP_FILES=true
        break
    fi
done

# Check for the existence of ai_commit_helper.py
if ! [[ -x "ai_commit_helper.py" ]] && ! command -v ai_commit_helper.py &> /dev/null; then
    echo "Error: ai_commit_helper.py not found or not executable."
    exit 2
fi

# Generate a diff of the staged changes
git diff --cached > staged_changes.diff

# Get the directory of the currently executing script
# Note, the ai_commit_helper.py script should always be in the same
# directory as the gc-smart script in that case.
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Now use that directory to call ai_commit_helper.py
# Generate a commit message and save it to a temp file
python3 "$DIR/ai_commit_helper.py" staged_changes.diff > tmp_commit_msg.txt

# Run git commit to start the commit process
git commit 2> git_error.log # redirect error messages to a log

if [ $? -ne 0 ]; then # if git commit failed
    if grep -q "you did not edit the message" git_error.log; then
        # Warn the user
        echo "Warning: It's a good practice to customize commit messages."
        read -p "Do you want to proceed without editing? (y/n) " choice
        case "$choice" in
            y|Y )
                git commit --no-edit # this will commit without prompting to edit message
                ;;
            n|N )
                echo "Commit aborted."
                ;;
            * )
                echo "Invalid choice. Commit aborted."
                ;;
        esac
    else
        cat git_error.log # Display other errors if there are any
    fi
fi

# Delete error log
rm git_error.log

# Delete files if --keep-files argument is not passed
if ! $KEEP_FILES; then
    rm -f staged_changes.diff tmp_commit_msg.txt
fi
