#!/bin/bash

# ==============================================================================
#                                  gc-smart
# ==============================================================================
#
# Filename  : gc-smart
# Author(s) : David Schmid (david.schmid@mailbox.org)
# Version   : 0.3.1
#
# ------------------------------ Description -----------------------------------
# Leverages gpt-commit-prompter to auto-generate commit messages for staged
# changes in a Git repository. A diff named staged_changes.diff is produced and
# fed to the AI helper. The result is saved to tmp_commit_msg.txt, which is then
# used as a template for the "git commit" command, permitting user review.
#
# ---------------------------- Prerequisites -----------------------------------
# - Staged changes should be in the repo.
# - gpt-commit-prompter should be in the current directory or in the PATH.
# - tmp_commit_msg.txt will be overwritten each run; backup crucial data.
# - Set tmp_commit_msg.txt as commit template via:
#   git config --global commit.template tmp_commit_msg.txt
#
# -------------------------------- Options -------------------------------------
# For options, execute "gc-smart --help" or refer to the print_help function.
#
# ==============================================================================

# Commit Message Generation and Handling
# ------------------------------------------------------------------------------

generate_commit_message() {
    # Use the gpt-commit-prompter script to process the diff file 
    # (staged_changes.diff) and generate an AI-enhanced commit message.
    # Write the message to tmp_commit_msg.txt.
    # NOTE: The gpt-commit-prompter script must be located in the same directory
    # as this executing script for this function to work correctly.
    if [ -n "$STYLE" ]; then
        python3 "$GCS_ROOT/python/gpt-commit-prompter" "$GIT_ROOT/staged_changes.diff" -i "$INSTRUCTION" -s "$STYLE" > "$GIT_ROOT/tmp_commit_msg.txt"
    elif [ -n "$INSTRUCTION" ]; then
        python3 "$GCS_ROOT/python/gpt-commit-prompter" "$GIT_ROOT/staged_changes.diff" -i "$INSTRUCTION" > "$GIT_ROOT/tmp_commit_msg.txt"
    else
        python3 "$GCS_ROOT/python/gpt-commit-prompter" "$GIT_ROOT/staged_changes.diff" > "$GIT_ROOT/tmp_commit_msg.txt"
    fi
}


handle_preview() {
    # Interactively preview the auto-generated commit message.
    # The user is presented with options to:
    # 1. Proceed with the current commit message.
    # 2. Regenerate commit message without instruction.
    # 3. Regenerate commit message with an instruction.
    # 4. View staged changes
    # 5. Abort the commit process.
    # The loop continues until the user decides to proceed with the commit or
    # aborts.
    regenerate=true

    while $regenerate; do
        # Preview the auto-generated commit message
        echo -e "\nGenerated Commit Message:"
        echo -e "-------------------------\n"
        cat "$GIT_ROOT/tmp_commit_msg.txt"
        echo -e "\n----------------------------------------------------------------\n\n"

        # Ask the user if he wants to proceed or regenerate
        read -p "Options: 
        1. Continue with commit
        2. Regenerate commit message without instruction
        3. Regenerate commit message with an instruction
        4. View staged changes
        5. Abort 

        Choose [1/2/3/4/5]: " choice

        case "$choice" in
            1)
                # Continue to commit logic...
                regenerate=false
                ;;
            2)
                # Regenerate commit message without instruction and preview again
                python3 "$GCS_ROOT/python/gpt-commit-prompter" "$GIT_ROOT/staged_changes.diff" > "$GIT_ROOT/tmp_commit_msg.txt"
                ;;
            3)
                # Regenerate commit message with an instruction
                read -p "Provide a guiding instruction for the AI: " INSTRUCTION
                python3 "$GCS_ROOT/python/gpt-commit-prompter" -i "$INSTRUCTION" "$GIT_ROOT/staged_changes.diff" > "$GIT_ROOT/tmp_commit_msg.txt"
                ;;
			4)
                # View staged changes
                less "$GIT_ROOT/staged_changes.diff"
                ;;
            5)
                # Abort
                echo "Commit aborted."
                rm -f "$GIT_ROOT/staged_changes.diff" "$GIT_ROOT/tmp_commit_msg.txt"
                exit 1
                ;;
            *)
                echo "Invalid choice. Commit aborted."
                rm -f "$GIT_ROOT/staged_changes.diff" "$GIT_ROOT/tmp_commit_msg.txt"
                exit 1
                ;;
        esac
    done
}

#-------------------------------------------------------------------------------
# Main Script Flow
#-------------------------------------------------------------------------------

GCS_ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$GCS_ROOT/bash/arg-checks.sh" 
source "$GCS_ROOT/bash/help-message.sh"
source "$GCS_ROOT/bash/error-handling.sh"

set_git_cmd "$@"
GIT_ROOT=$(${GIT_CMD} rev-parse --show-toplevel)

# Argument parsing and settings
check_for_help "$@"
set_keep_files_flag "$@"
set_preview_flag "$@"
set_instruction "$@"
set_style_option "$@"

if [[ "$GIT_CMD" == "git" ]]; then
    # Only check if the repository is a valid Git repository if GIT_CMD is 'git'
    check_git_repo
fi

check_staged_changes
check_ai_helper
check_commit_template

# Generate a diff of the staged changes
$GIT_CMD diff --cached > "$GIT_ROOT/staged_changes.diff"

generate_commit_message

if $PREVIEW; then
	handle_preview
fi

# Run git commit to start the commit process
$GIT_CMD commit 2> "$GIT_ROOT/git_error.log" # redirect error messages to a log

# Check the result of the git commit operation
if [ $? -ne 0 ]; then # if git commit failed
	handle_git_commit_error
fi

# Delete files if --keep-files argument is not passed
if ! $KEEP_FILES; then
    rm -f "$GIT_ROOT/git_error.log"
    rm -f "$GIT_ROOT/staged_changes.diff" 
	rm -f "$GIT_ROOT/tmp_commit_msg.txt"
fi
